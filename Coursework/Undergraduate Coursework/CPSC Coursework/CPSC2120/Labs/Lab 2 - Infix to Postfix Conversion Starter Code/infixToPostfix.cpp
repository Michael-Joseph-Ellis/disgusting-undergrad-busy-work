/*
 * Name: Michael Joseph Ellis 
 * Date Submitted: 2/10/2025
 * Lab Section: 003 
 * Assignment Name: Infix to Postfix Conversion
 */

#include <string>
#include <stack>
#include <iostream>

using namespace std;

//Converts an infix arithmetic expression into postfix
//The function takes 3 parameters
//First parameter: array of strings for infix expression
//    each string is either an integer number or operator symbol
//Second parameter: number of strings in infix expression
//Third parameter: array of strings for postfix expression
//    generated by function, same format as first parameter
//    assumes that postfix is at least the size of postfix
//Return value: int, number of strings in postfix expression
//    Returns 0 if an error is encountered when converting expression
//    An error occurs with a mismatched parenthesis, e.g. ( ( ) or ( ) ) etc.
//Operator symbols:
// ( : left parenthesis, all operations between this and ")" take place first
// ) : right parenthesis, all op.s back to previous "(" take place first
// * : multiplication, higher precedence - takes place before "+" and "-"
// / : division, higher precedence - takes place before "+" and "-"
// % : remainder, higher precedence - takes place before "+" and "-"
// + : addition, lower precedence - takes place after "*" , "/" , "%"
// - : subtraction, lower precedence - takes place after "*" , "/" , "%"
//The function is not specified to work with any other operator symbols
//Any string in infix may be assumed to be an integer operand if none
// of the above symbols

// returns the precedence of an operator
int precedence(string op) {
    if (op == "(") return 0; // '(' has the lowest precedence
    if (op == "+" || op == "-") return 1;
    if (op == "*" || op == "/" || op == "%") return 2;
    return -1; 
}

// Converts an infix arithmetic expresson into postfix
int infixToPostfix(string infix[], int length, string postfix[]) {
    stack<string> operators;
    int postfixIndex = 0;
    int openParentheses = 0;
    
    for (int i = 0; i < length; i++) {
        string token = infix[i];
        
        // If the token is an operand, add it to postfix
        if (isdigit(token[0])) {
            postfix[postfixIndex++] = token;
        }
        // If the token is '(', push it onto the stack
        else if (token == "(") {
            operators.push(token);
            openParentheses++;
        }
        // If the token is ')', pop from the stack to postfix until '(' is found
        else if (token == ")") {
            if (openParentheses == 0) return 0; // Mismatched parenthesis
            while (!operators.empty() && operators.top() != "(") {
                postfix[postfixIndex++] = operators.top();
                operators.pop();
            }
            if (operators.empty()) return 0; // Mismatched parenthesis
            operators.pop(); // Remove '('
            openParentheses--;
        }
        // If the token is an operator
        else {
            while (!operators.empty() && precedence(operators.top()) >= precedence(token)) {
                postfix[postfixIndex++] = operators.top();
                operators.pop();
            }
            operators.push(token);
        }
    }
    
    // Pop remaining operators from stack
    while (!operators.empty()) {
        if (operators.top() == "(") return 0; // Mismatched parenthesis
        postfix[postfixIndex++] = operators.top();
        operators.pop();
    }
    
    return postfixIndex;
}

//Main function to test infixToPostfix()
//Should convert 2 + 3 * 4 + ( 5 - 6 + 7 ) * 8
//            to 2 3 4 * + 5 6 - 7 + 8 * +
// int main()
// {
//     string infixExp[] = {"2", "+", "3", "*", "4", "+", "(",
//                          "5", "-", "6", "+", "7", ")", "*",
//                          "8"};
//     string postfixExp[15];
//     int postfixLength;

//     cout << "Infix expression: ";
//     for (int i=0; i<15; i++)
//     {
//         cout << infixExp[i] << " ";
//     }
//     cout << endl;
//     cout << "Length: 15" << endl << endl;

//     postfixLength = infixToPostfix(infixExp, 15, postfixExp);

//     cout << "Postfix expression: ";
//     for (int i=0; i<postfixLength; i++)
//     {
//         cout << postfixExp[i] << " ";
//     }
//     cout << endl;
//     cout << "Length: " << postfixLength << endl;
    
//     return 0;
// }